import numpy as np
import cdd

def cone_generators_to_H(generators):
    """
    Convert a cone given by its generators (V-representation) to its H-representation.
    
    Parameters:
        generators (np.ndarray): An array of shape (n, d) where each row is a generator in ℕ^d.
        
    Returns:
        H (np.ndarray): An array of inequalities, each row representing 
                        [b, a1, a2, ..., ad] for the inequality 
                        b + a1*x1 + ... + ad*x_d >= 0.
    """
    n, d = generators.shape
    # For a cone, each generator is "homogenized" by a 0 in the first column.
    # (Recall: For points one uses 1; for cones, use 0.)
    V_array = np.hstack((np.zeros((n, 1)), generators))
    
    # Create a cdd Matrix from the array. cdd expects the input as a list of lists or numpy array.
    mat = cdd.matrix_from_array(V_array.tolist())
    mat.rep_type = cdd.RepType.GENERATOR
    
    # Convert to H-representation using the double description method.
    poly = cdd.polyhedron_from_matrix(mat)
    # # get_inequalities returns a list of lists, where each list is [b, a1, a2, ..., ad]
    H = cdd.copy_inequalities(poly)
    V = cdd.copy_generators(poly)
    return H, V

def intersect_cones(H1, H2):
    """
    Compute the intersection of two cones given by their H-representations.
    
    Parameters:
        H1, H2 (np.ndarray): Arrays of inequalities representing the cones.
        
    Returns:
        generators_int (np.ndarray): Generators (V-representation) for the intersection.
    """
    # The intersection of the cones is the set of x satisfying both sets of inequalities.
    # We simply stack the inequalities together.
    
    H_combined = np.vstack((H1, H2))
    
    # Create a cdd Matrix for the combined inequalities.
    H_mat = cdd.matrix_from_array(H_combined.tolist())
    H_mat.rep_type = cdd.RepType.INEQUALITY
    
    # Create a polyhedron from the H-representation.
    poly_int = cdd.polyhedron_from_matrix(H_mat)
    # Obtain the generators (V-representation) of the intersection.
    generators_int = cdd.copy_generators(poly_int)
    return generators_int

# === Example Usage ===

# Define two cones in ℕ^2 by their generators.
# Cone 1 is generated by (1, 0) and (0, 1)

cone1 = np.array([[1,0,0]])
cone2 = np.array([[0,1,0]])

v = intersect_cones(cone1, cone2)

print(v)